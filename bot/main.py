TOKEN = '6225529145:AAEiic5AitqYpKRV16C2tYOCDKHUAvcZnKY'
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor


from simple_r import *
from advanced_r import *

import markups as men

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

CORE_TYPE = 0
WORDS = []
ADVANCED = []


class Corrector:
    def __init__(self, sts):
        self.status = sts
    def correct(self, line):
        line = line.lower()
        if self.status == 1: #Jaccard + Levenstein
            return 'üçèJaccard: ' + JDreco([line])[0] + '\n' + 'üçéLevenstein: ' + levenstein([line])[0]
        elif self.status == 2: #ML
            return ML_T9_line(line)
        elif self.status == 3: #advanced
            return ADVANCED.advanced_correct(line)
        elif self.status == 4: #check
            
            return '–í –æ—Å–Ω–æ–≤–Ω–æ–º —Å–ª–æ–≤–∞—Ä–µ: ' + ('‚úÖ' if line in WORDS else '‚ùå')  + '\n–í advanced- —Å–ª–æ–≤–∞—Ä–µ: '  +  ('‚úÖ' if line in ADVANCED.COUNTS else '‚ùå')
        else:
            return 'üçèJaccard: ' + JDreco([line])[0] + '\nüçéLevenstein: ' + levenstein([line])[0]  + '\nüí©ML v1.2: ' + ML_T9_line(line) + '\nü•≠Advanced correct: ' + ADVANCED.advanced_correct(line)
        
USERS_DICT = {}
USERS_MODELS = {}

@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    USERS_DICT[message.from_id] = Corrector(0)
    await message.reply("–ù–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –Ω–µ–ø—Ä–∏–ª–∏—á–Ω–æ–µ!", reply_markup=men.mainMenu)


@dp.message_handler(commands=['help'])
async def process_help_command(message: types.Message):
    await message.reply("–ù–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å —Å –æ—à–∏–±–∫–æ–π, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!")   

@dp.message_handler()
async def echo_message(msg: types.Message):
    if  msg.text == '‚¨ÖÔ∏è Back':
        corrector = USERS_DICT[msg.from_id]
        corrector.status = 0
        await bot.send_message(msg.from_user.id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ó–¥–µ—Å—å —Å–ª–æ–≤–∞ –∏—Å–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Å—Ä–∞–∑—É –≤—Å–µ–º–∏ –∫–æ—Ä—Ä–µ–∫—Ç–æ—Ä–∞–º–∏.', reply_markup=men.mainMenu)

    elif msg.text == 'Simple Jaccard and Levenstein':
        corrector = USERS_DICT[msg.from_id]
        corrector.status = 1
        await bot.send_message(msg.from_user.id, '–ü—Ä–æ—Å—Ç–µ–π—à–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–æ—Ä—ã, –æ—Å–Ω–æ–≤–∞–Ω—ã–µ –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ –ñ–∞–∫–∫–∞—Ä–∞ –∏ –õ–µ–≤–µ–Ω—à—Ç–µ–π–Ω–∞, –∫ –í–∞—à–∏–º —É—Å–ª—É–≥–∞–º', reply_markup=men.otherMenu)

    elif msg.text == 'Machine learning':
        corrector = USERS_DICT[msg.from_id]
        corrector.status = 2
        await bot.send_message(msg.from_user.id, 'Machine learning:\n üí©–û–±—Ä–∞—â–∞–µ–º –≤–∞—à–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ç–æ, —á—Ç–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –∫–æ—Ä—Ä–µ–∫—Ç–æ—Ä–∞, –æ—Å–Ω–æ–≤–∞–Ω–Ω–æ–≥–æ –Ω–∞ –º–∞—à–∏–Ω–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏, –≤ –±–æ—Ç–∞ –ø–æ–∫–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å. –ó–¥–µ—Å—å –ª–µ–∂–∏—Ç —É—â–µ—Ä–±–Ω–∞—è –≤–µ—Ä—Å–∏—è...', reply_markup = men.otherMenu)
    
    elif msg.text == 'Advanced corrector':
        corrector = USERS_DICT[msg.from_id]
        corrector.status = 3
        await bot.send_message(msg.from_user.id, 'Advanced corrector. –°–ª–æ–≤–∞ –∏—Å–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Å –ø–æ–º–æ—â—å—é –ø–æ–∏—Å–∫–∞ –æ—à–∏–±–∫–∏. –í —Å–ª—É—á–∞–µ –ø—Ä–æ–≤–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–æ—Ä–æ–≤', reply_markup = men.otherMenu)

    elif msg.text == 'Check dictionary':
        corrector = USERS_DICT[msg.from_id]
        corrector.status = 4
        await bot.send_message(msg.from_user.id, '–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ, –∞ —è —Å–∫–∞–∂—É, –µ—Å—Ç—å –ª–∏ –æ–Ω–æ –≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Å–ª–æ–≤–∞—Ä—è—Ö', reply_markup = men.otherMenu)

    else:
        corrector = USERS_DICT[msg.from_id]
        qline = corrector.correct(msg.text)
        await bot.send_message(msg.from_user.id, qline)



if __name__ == '__main__':
    with open('list.data', 'rb') as file:  
        WORDS = pickle.load(file)
    ti = learn()
    ADVANCED = Advanced()
    print(ti)
    executor.start_polling(dp)